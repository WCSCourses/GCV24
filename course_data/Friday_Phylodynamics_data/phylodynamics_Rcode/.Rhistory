tr <- nodeTimes(tr, youngestTip=tr$youngestTip)
# now add the discrete traits to the tr object
tr <- addDiscreteTraits(tr)
# now add the highest posterior density intervals
tr <- addLatLonHPD(tr)
tr <- fit_HPDs_to_standard(tr,ltol=0.005)
tr$ntips <- length(tr$tip.label)
print(tr)
attributes(tr)
print(tr$propNames)
propIndex <- 1
kable(t(table(tr$props[1:tr$ntips,propIndex])),
caption=paste("Number of sequences per",tr$propNames[propIndex]))
propIndex <- 2
kable(t(table(tr$props[1:tr$ntips,propIndex])),
caption=paste("Number of sequences per",tr$propNames[propIndex]))
lltbl <- c(min(tr$latlon[,1]),max(tr$latlon[,1]),min(tr$latlon[,2]),max(tr$latlon[,2]))
names(lltbl) <- c("Min Lat","Max Lat","Min Lon","Max Lon")
kable(t(lltbl),caption="Range of Lat-Lon values")
plot(tr$latlon[,2], tr$latlon[,1], xlab="Longitude", ylab="Latitude")
title("Raw plot of spatial coordinates")
tr <- ladderize(tr)
plot(tr)
add.scale.bar()
propIndex <- 1
plot_discrete_tree(tr, propIndex=propIndex, show.tip.label=FALSE)
propIndex <- 2
plot_discrete_tree(tr, propIndex=propIndex, show.tip.label=FALSE)
# plot tree on map
plot_mcc_tree_with_hpds(tr, propIndex=1, xlim=c(-15,15), ylim=c(47,65), legpos="topleft")
# plot tree on map
plot_mcc_tree_with_hpds(tr, propIndex=2, xlim=c(-15,15), ylim=c(47,65), legpos="topleft")
# Plain R script of Mcc_tree_incursions
# S J Lycett
# 20 Feb 2024
# the start of this is the same as Mcc_tree_plot_example.R
#######################################################
# STEP 0
#######################################################
# uncomment to install if required
#install.packages("ape")
#install.packages("maps")
#install.packages("mapdata")
#install.packages("mapproj")
#install.packages("conicfit")
#install.packages("lattice") - needed for levelplot
# now load required packages
# base trees
library(ape)
# maps - not needed here
#library(maps)
#library(mapdata)
#library(mapproj)
# needed to fit HPDs to ellipses - not needed here
#library(conicfit)
# needed for levelplot
library(lattice)
# load Lycett_phylo utility code as separate functions
source("getEl.R")
source("calcDecimalDate.R")
source("read_MCC_tree.R")
source("get_BEAST_cols.R")
source("custom_map_movie.R")
#######################################################
# STEP 1
#######################################################
# define tree file name
treeName <- "cov_net_sim_mper2_120genomes_TN93G4_strict_skygrid_traits_2_mcc.tre"
# read in tree using custom function (could use ggtree also)
tr <- read_latlon_mcc_tr(treeName)
# need to add the decimal dates [not always necessary but need to do this in this example]
tr$decDates	   <- apply(as.matrix(apply(as.matrix(tr$tip.label), 1, getEl, ind=1, sep="\\|", fromEnd=TRUE)),1,calcDecimalDate_from_yymmdd,sep="-")
tr$youngestTip <- max(tr$decDates)
tr <- nodeTimes(tr, youngestTip=tr$youngestTip)
tr <- addDiscreteTraits(tr)
tr <- addLatLonHPD(tr)
tr <- fit_HPDs_to_standard(tr,ltol=0.005)
tr$ntips <- length(tr$tip.label)
# the tree object
print(tr)
# extra attributes
print(attributes(tr))
# discrete traits added
print(tr$propNames)
# discrete trait 1
propIndex <- 1
table(tr$props[1:tr$ntips,propIndex])
# discrete trait 2
propIndex <- 2
table(tr$props[1:tr$ntips,propIndex])
#######################################################
# STEP 2
#######################################################
# use the properties (props) to find location from-to
# first get the node indices from the edges of the tree (1=ancestral, 2=child)
fromNode    <- tr$edge[,1]
toNode      <- tr$edge[,2]
# also get the respective times of these edges (i.e. the time of the ancestral node & the time of the child node)
fromTime    <- tr$nodeTimes[fromNode]
toTime      <- tr$nodeTimes[toNode]
midEdgeTime <- (fromTime+toTime)/2
#########################
# Country is propIndex = 1
propIndex   <- 1
fromCountry <- tr$props[fromNode,propIndex]
toCountry   <- tr$props[toNode,propIndex]
# number of transitions from Country to Country over the whole tree
country_tbl <- table(fromCountry,toCountry)
print(country_tbl)
# for display, set diagonal to -1
cols <- c("grey90",topo.colors(100))
diag(country_tbl) <- -1
levelplot(country_tbl,col.regions=cols, main="Number of Transitions from-to Country")
#########################
# Place is propIndex = 2
propIndex   <- 2
fromPlace   <- tr$props[fromNode,propIndex]
toPlace     <- tr$props[toNode,propIndex]
# number of transitions from Place to Place over the whole tree
place_tbl <- table(fromPlace,toPlace)
print(place_tbl)
# for display, set diagonal to 0
cols <- c("grey90",topo.colors(100))
diag(place_tbl) <- -1
levelplot(place_tbl,col.regions=cols, main="Number of Transitions from-to Place")
# now also plot the incursions over time
tr$nodeTimes
fromTime
toTime
hist(fromTime)
min(fromTime)
max(fromTime)
max(toTime)
invertDecimalDate(fromTime)
invertDecimalDate(min(fromTime))
invertDecimalDate(max(toTime))
invertDecimalDate(max(frimTime))
invertDecimalDate(max(fromTime))
# now also plot the incursions over time
# make the time bins
timeTxt <- c("2021-10-01","2021-11-01","2021-12-01","2022-01-01","2022-02-01","2022-03-01","2022-04-01","2022-05-01","2202-06-01")
timeBins<- apply(as.matrix(timeTxt),1,calcDecimalDate_from_yymmdd,sep="-")
timeBins
place_tbl
country_tbl
which(fromCountry!="UK" & toCountry=="UK")
table(fromPlace)
which(fromPlace!="Cambridge" & toPlace=="Cambridge")
# now also plot the incursions over time, to Cambridge
# make the time bins
timeTxt <- c("2021-10-01","2021-11-01","2021-12-01","2022-01-01","2022-02-01","2022-03-01","2022-04-01","2022-05-01","2202-06-01")
timeBins<- apply(as.matrix(timeTxt),1,calcDecimalDate_from_yymmdd,sep="-")
inds    <- which(fromPlace!="Cambridge" & toPlace=="Cambridge")
h <- hist(fromTime[inds],breaks=timeBins)
fromTime[inds]
h$minds
h$mids
h$counts
plot(h)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=12, fig.height=6)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",sep="")
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName,sep="")
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=8, fig.height=8)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
attributes(seqs)$names[1:5]
taxa <- as.matrix(attributes(seqs)$names)
host <- apply(taxa,1,getEl,ind=2,sep="\\|")
kable(table(host))
taxa <- as.matrix(attributes(seqs)$names)
host <- apply(taxa,1,getEl,ind=2,sep="\\|")
kable(t(table(host)))
region <- apply(taxa,1,getEl,ind=3,sep="\\|")
kable(t(table(region)), caption="Region")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=8, fig.height=8)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
# read sequences into seqs object using R package ape and read.dna function
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
# number of sequences
nseqs       <- length(seqs)
attributes(seqs)$names[1:5]
taxa <- as.matrix(attributes(seqs)$names)
host <- apply(taxa,1,getEl,ind=2,sep="\\|")
kable(t(table(host)), caption="Host-types")
region <- apply(taxa,1,getEl,ind=3,sep="\\|")
kable(t(table(region)), caption="Region")
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
tr$tip.label[1:5]
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=8, fig.height=8)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
# read sequences into seqs object using R package ape and read.dna function
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
# number of sequences
nseqs       <- length(seqs)
attributes(seqs)$names[1:5]
taxa <- as.matrix(attributes(seqs)$names)
host <- apply(taxa,1,getEl,ind=2,sep="\\|")
kable(t(table(host)), caption="Host-types")
region <- apply(taxa,1,getEl,ind=3,sep="\\|")
kable(t(table(region)), caption="Region")
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
tr$tip.label[1:5]
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
figPath <- paste0("simple_tree_building_in_R/")
dir.create(figPath)
knitr::opts_chunk$set(fig.path = figPath)
knitr::opts_chunk$set(fig.width=8, fig.height=8)
# install R package ape if needed (only do this once)
#install.packages("ape")
# load required library (do this every time)
library(ape)
# load custom functions (utility code for sequence or tree tips names)
source("getEl.R")
source("calcDecimalDate.R")
# read sequences into seqs object using R package ape and read.dna function
seqFileName <-  "H5N1_HA_sel5regions.fas"
seqs        <- read.dna(seqFileName,format="fasta",as.matrix=FALSE)
# number of sequences
nseqs       <- length(seqs)
attributes(seqs)$names[1:5]
taxa <- as.matrix(attributes(seqs)$names)
host <- apply(taxa,1,getEl,ind=2,sep="\\|")
kable(t(table(host)), caption="Host-types")
region <- apply(taxa,1,getEl,ind=3,sep="\\|")
kable(t(table(region)), caption="Region")
dd          <- dist.dna(seqs,model="TN93",gamma=0.1,pairwise.deletion=TRUE)
tr  <- nj(dd)
plot(tr, show.tip.label=FALSE)
tr  <- ladderize(tr)
plot(tr, show.tip.label=FALSE)
treeFileName<- gsub(".fas","_ape_tn93_nj.nwk",seqFileName)
write.tree(tr, file=treeFileName)
tr$tip.label[1:5]
# uses custom function getEl
decDates  <- as.numeric(apply(as.matrix(tr$tip.label),1,getEl,ind=1,fromEnd=TRUE,sep="\\|"))
# find best rooted tree using rtt function and decimal dates (decDates)
rtr <- rtt(tr,decDates)
# save the best rooted tree
tname<- gsub(".nwk","_rtt.nwk",treeFileName)
write.tree(rtr, file=tname)
plot(rtr, show.tip.label=FALSE)
title("Rooted NJ tree")
add.scale.bar()
# get the genetic distance (all nodes)
rtt_all_dists<- dist.nodes(rtr)
ntips        <- length(rtr$tip.label)
rootNode     <- length(rtr$tip.label)+1
# get the genetic distance from the rootNode to all the sequences (tips)
rootToTip    <- rtt_all_dists[1:ntips,rootNode]
clock_fit    <- lm(rootToTip ~ decDates)
clockrate    <- round(clock_fit$coefficients[2]*100000)/100000
tmrca        <- -clock_fit$coefficients[1]/clock_fit$coefficients[2]
tmrca        <- round(tmrca*1000)/1000
plot(decDates,rootToTip,pch=21,
xlab="Date", ylab="Genetic Distance From Root")
abline(clock_fit,col="blue")
legend("topleft",c(paste("TMRCA =",tmrca),
paste("Clock rate estimate =",clockrate),
"Sequences"),
pch=c(NA,NA,21), col=c(NA,"blue","black"), lty=c(NA,1,NA),bty="n")
title("Root-to-Tip plot of NJ tree")
